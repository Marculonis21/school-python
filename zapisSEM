GNU/GPL (GNU = GNU not Unix, GPL = general public licence)
Linux, BSD (FreeBSD, OpenBSD)
TERMINÁL
pwd
cd / = change directory
	cd = domácí složka
ls = výpis
	ls -l = long - dlouhý výpis
	ls -la = skryté soubory
šipkou vyvolám předchozí příkaz
když text v prvním sloupci začíná:
	d = directory
	l = link
	- = domkument
tabulátor doplňuje slova Dok -> Dokumenty (píšu dokud mi nefunguje tabulátor - má více možností na doplnění)
Ctrl+L = maže příkazy
home	-> ru	-> dokumenty
		-> download
relativní cesta: cd ../Download
absolutní cesta (začíná domácí složkou - začíná /): cd /home/ru/Download
~ = domácí adresář
.. = nadřazený adresář -> cd ../.. (o 2 odresáře nahoru)
*.py = pro všechny soubory s koncovkou .py
./ = cesta - pustí program - př.: ./deset_cisel.py (ukončím Ctrl+C)
which ls = kde je
mkdir = nový adresář
rmdir = smazání adresáře - musí být prázdný
cp = kopírování souboru
rm = smazání souboru, linku
	rm -r = smazání celého odresáře (rekursivní mazání - od této složky smaže vše)
mv = přemístění
hard link:
	soubor.txt \
		    -> i-node -> data
	odkaz1.txt /
	nejsou na sobě závislí - můžu smazat soubor.txt
soft link:
	odkaz1.txt -> soubor.txt -> i-node -> data
	jsou na době závislí - nelze smazat původní soubor bez ztráty dat
ln -s = utvoření linku
vim = textový editor (nepoužívá Ctrl, Alt)
	- 3 režimy: prohlížecí, psací, čekající na příkazy
	- psaní do textu - Insert
	- psaní příkazů - Esc 	-> :w (zapsat)
				-> :q (uložit)
				-> :u (zpět)
	- mazání řádku v prohlížecím režimu: dd
manuálové stránky - man (+ příkaz)
	-> vyhledávání = /
	-> konec = q
rozlišují se malé a velké znaky
práva: r - read, w - write, x - execute (spustit)
práva se nastavují těmto: u - owner, g - group, o - others
UID - user ID
GID - group ID
PID - process id
oktanová soustava = osmičková soustava (3 bity)
-rw-r-xr--
	-	rw-	r-x	r--
	typ	u	g	o
	souboru	110	101	100shift
		6	5	4
typ souboru např. d - directory (složka)
oktanová soustava - vyjádření práv 3 číslice v oktanové soustavě - nejčastěji pro běžný soubor 644, pro spustitelný soubor 755
nastavení práv: chmod (př.: chmod 735 progr1.py) - číslo za chmod vyjádření práv
dlouhý výpis:
práva		počet hard linků	owner	group
-rw-r-xr--	1			ru	users
pro složky r - číst, w - měnit obsah, x - spustitelné z terminálu
systém funguje v číslech (UID, GID)
id = napíše moje UID a GID
top = procesy v systému - PID, USERS (na čem to běží - práva), S (stav - sleeping, running, waiting)
			- load average - čísla ukazující vytížení systému (čísla začínající 0 -> skoro nepracuje)
ps = komunikace s procesy
ps -aux = vypíše procesy
| = pipe (spojuje příkazy)
ps -aux | less = statický výpis procesů, ve kterém se lze pohybovat, lze v něm i vyhledávat (/vyhledávané)
ps aux | grep vyhledávané = vyfiltruje pouze řádky s vyhledávaným slovem
kill = zrušení procesu, zadává se s PID
htop = podobné jako top, lze použít na rušení procesů jako kill
	- pomocí F9 se dají najít čísla příklazů, např. 15 SIGTERM, 9 SIGKILL
příkazová řádka
	- linuxové příkazy v pgm2 v pdf
	- shell - interpreter příkazového řádku
		- např. bash
	- lze psát skripty nebo jen příkazy stejně jako v pyshell (akorát tam interpreter pythonu, zde interpreter bashe)
	- kolona - příkazy oddělené |
		 - klávesnice			 pipe			obrazovka
			stdin -> příkaz1 -> stdout  stdin -> příkaz2 -> stdout
		 - ls -l | more = stránkuje dlouhý výpis
		 - ls -al | less = lze se pohybovat
		 - ps aux | less
		 - ps aux | grep helnova | less
	- seznamy - příkaz1; příkaz2; příkaz3; ... = postupně vykoná příkazy
		  - spojka && = druhý se provede pouze pokud první se provede bez chyby
		  - spojka || = druhý se provede pouze pokud první vrátí chybový stav
		  - spojka & = spuštění příkazui na pozadí - příkazy na sebe nečekají, první se spustí v nové kopii shellu a přesune se do pozadí
	- stdin = standartní vstup, většinou klávesnice
	- stdout = standartní výstup, většinou monitor

	- > = přesměrování stdout, např. ls > s.txt (přesměrování do nově vytvořeného textového souboru), ls > /dev/lpr (přesměrování na tiskárnu)
	- < = přesměrování stdin
	- stderr = standartní výstup s errorem
	- 2> = přesměrování chybového výstupu, např. ls adr1 2> /dev/null (chybové hlášení se úplně vymaže, nikde se nehromadí)

###
https://www.pslib.cz/milan.kerslager/BASH:_Skriptování
shellové skripty - "hashmark" '#!/bin/bash'
	- musí být spustitelné
	- odsazování není nutné! + case sensitive

	příkazy:
		- echo == print
		- zakládání proměnné "a = 'abc'"
		- ->echo $a (výpis) 
		- high level: echo "v proměnné a je hodnota $a"
		- bash příkazy do skriptu: echo "výpis adresáře $(ls -al)"

		- předávání parametrů echo ($1 $2)

		- if: 
		"if [ -f /tmp/IamHere ]; then
		"	echo "Jsem tu"
		"fi
		
		příkaz když true
		"[ výraz ] && příkaz 
		X
		příkaz když false
		"[ výraz ] || příkaz	
		
		
		- while:
		"while true; do
		"
		"done

		- for:
		"for POLOZKA in a b c d
		"do
		"	echo $POLOZKA
		"done
		
		"for i in $KOUPIT; do
		"	echo $s!

		- čtení vstupu: read Vstup
		
		"done

		- echo "echo -n mažu" (-n neřádkuje) 

		- split v bash
		" echo $s | awk -F'.' '(print $1)'
		(awk separuje pomocí '.' -> vypíše první proměnnou)
		(když nezadám separátor -> rozdělí slova pomocí mezer

du - shell příkaz, velikost souborů v adresáři
	-s (sumarrize)
	-h (humanreadable)

cat něco >> něco někam
	- přesměrování obsahu souboru na jinou polohu (>> append) (> make new)
	

Virtualizace - pc v softwaru 
	- hardware + software Hypervizor
	- hypervizor může být i bez systému
	- virtualizace se musí povolit v biosu
	- virtualbox, KVM
	-----------------
	- připojení ve škole
	
	ferda login: root
	password: you know what I mean
	
	- "Správce virtuálních strojů -> nové připojení"
	- uživatelské jméno - vuser
	- host - vh
	- adduser jméno
	- usery v /home/ nebo v cat /etc/passwd
		kralik:x:1000:1000:/home/kralik: /bin/bash
		login:password:UID:GID:HOMEDIR:SHELL
	
	- změna hesla - passwd user
	- heslo userů cat /etc/shadow
	- userdel -rf jméno (r adresář; f force i kdyby tam byl)

	- reboot pro restart
	- yum install balík (pro instalaci)
	- uname -r - kernel info
	- ip addr - net/connection info
	- ifconfig
	- vlastní ipv4: 10.12.0.161 (pamatovat)
	- service (kouknout na program (deamon) běžící na pozadí)
	#Přihlašování na dálku	
	- sshd server
	- ssh klient (připojování mezi pc)
	- "ssh [jméno clienta]@[ip]" -> root heslo
		"root@10.12.0.161" - > root heslo

	- na pc who/w pro usery
	- copy na server scp [(co) (komu):(kam)]
	- do .bashrc alias na připojení na server 
		"alias bringmeferda='ssh root@10.12.0.161'"
    
    PŘIPOJOVÁNÍ NA VIRT PC
    https://moodle.gybon.cz/mod/page/view.php?id=13528

    - přístup k virt pc přes LAN
        virt adresa ipv4 10.12.0.0/24 - 10.12.0.XX
        "ping 10.12.0.XX"
    -> "ssh login@10.12.0.XX"

    - bash - route / route -n 
        vypsání spojení
    
	- vzdálený port přes VPN - přes wan
		vpn - PPTP
        připojení z cizí než z LAN

        SERVER: vpn.gybon.cz == 195.113.185.170
        
        pro WIN Putty (ssh client)
        LINUX ssh v bash

    - DU připojit se k virt pc z domu :) 
	

-tvl https://www.reddit.com/r/unixporn/comments/dekj2i/oc_a_spotify_terminal_user_interface_written_in/

MATICE
    - "seznam sloupcových vektorů" - "dvojrozměrné pole (list)"
    - 

https://askubuntu.com/questions/465109/where-should-i-put-my-script-so-that-i-can-run-it-by-a-direct-command

DATABÁZE
    
    - nejjednodušší "databáze" - excel/"tabulkový procesor"

    - tabulka (definice tabulky - pojmenování položek + seznam typů)
        - položka/item/field
        - typ dat pro item
    
    - "relační databáze"
        - pojem databáze = soubor tabulek (hromada :))
        -> mezi sebou vztahy, procesy
            ("spolupráce" nezávislých tabulek)
            - tzv. relace (spojení) mezi tabulkami (dat.) 
        
        - "relace" = vazba tabulek
            "tři typy relací"
            - může být v různém poměru 1:1 / 1:n / n:n

    - primární klíč (private key) - v každé tabulce nutný
        - často ID - nesmí být duplicitní hodnota
    - cizí klíč - "klíč (odkaz) do jiné tabulky"
    

    - databáze over "excel"
        - dat. může být webová - multi - více lídí na jedné databázi
            (přístup dat pro klienty)
    
    - SQL - strukturovaný dotazovací jazyk
		- SQL server
		- příkazy jazyka sql
        - klient -> databáze 
            (klient přes server (s databází) přes příkazy sql
             komunikuje s databází)

    - MySQL = "systém řízení báze dat"
        - Apache, MySQL, PHP (trojkombinace) - server, připojení, jazyk

    1.Instalace webového serveru APACHE na virtual
    2.MariaDB (mysql)
    3.firewall aby byl server přístupný

Jazyk SQL
    - vše ukončeno středníkem
    - \u / use vybrání databáze, která se bude používat
    - show databases;
    - show tables;
    - CREATE DATABASE name;
    - DROP DATABASE name; = delete / může se i bez caps
    - CREATE TABLE adresy(
        id INT AUTO_INCREMENT,
        prijmeni VARCHAR(50),
        ...
        PRIMARY KEY(id)
      )
    
    - "CAPS asi není potřeba"

    - varchar - volný typ proměnné (max 50 znaků)

    - show columns from 'jmeno-databáze';
        -vypsat tabulku
    
    - INSERT - pro vložení záznamu
    "insert into 'jmeno-tabulky' '(polozky)' values(hodnoty);"
    
    - SELECT - výpis hodnot v tabulce
    "select * from 'jmeno-tabulky'" (* = all)

    - UPDATE - úprava existujícího řádku ++ ('where' udává jaký řádek !! jinak je změna u všech)
    "update 'jmeno-tabulky' set 'hodnota-column' = 'hodnota (hradec)' where id=1"
    "update adresy set obec = 'Hradec' where id=1"
    
    - SELECT
    
    "select * from 'databaze' where 'podminka'='neco'"
    "select value,value from --||--"
    "select prijmeni,jmeno,rokmat,para,stdel from profesor,tridni where
'vazebni podminka (př. profesor.id_prof=tridni.id_prof)' where 'vypisovaci podm'"
    - select abs.rokmat,abs.prijmeni,abs.jmeno,abs.para,abs.stdel,profesor.jmeno,profesor.prijmeni from abs,tridni,profesor where abs.rokmat=tridni.rokmat and tridni.para=abs.para and tridni.id_prof=profesor.id_prof and abs.prijmeni='Adámek' and abs.jmeno='Pavel'

    - volné string jako if
    "select * from tabulka where jmeno like 'Petr%'" -> hledá Petr/Petra/...
    
    - kolikrát někdo něco (třídnictví učitele)
    "count(*) as počet... from ... where ... group by (podmínka countu) order
     by počet desc"



###
PHP
###

    PHP = scriptovací program (jako python)
        - scriptovací (v úvodu zadáme interpreter -> překladač běží za běhu)
          X
        - Céčko - nejdřív celá kompilace (překladač) -> exe soubor a ten se
          spustí
          X
        - Java - částečný překlad do "byte códu" -> ten se pouští pomocí jre
          "java runtime engine" (od java)

    - u PHP - na webu -> síťová (webová) aplikace typu klient-server (prohlížeč-apache) 
        - klient server - komunikace pomocí http/https - hypertext transfer protocol
        - www - tcp/ip protokol
        - "Chrome" - program, který umí ukazovat na html soubory
        
    - client side - (prohlížeč)
        - př. JavaScript (psaní scriptů pro prohlížeče)
    
    - Java umí obojí - být na straně klienta i na serveru
        - klient -> java applet
        - server -> servlet
    
    - PHP - serverside programming
        - na serveru soubory (př. .php) = scripty jazyka php - vykonáván serverem
        - script na webu -> webový interpreter (php engine) -> formuje html -> 
        html jde k serveru

    SYNTAXE 
    - proměnné s $
    - syntaxe ohraničovaná {}
    - loop 
        - "for ($i = 1; $1 <= 10; $i++)
           {
               echo "<font size=\"$i\"> $i </font> <br>\n";
           }
    

####
Html
####
    - hypertext markup language
    = značkovací jazyk
    - pomocí tagů "označkovávám text" (tagy ~ elementy)
    - stejně jako xml je to pouze text

    - O html stránkách:
    - "<html>" kořenový element
    - "<head>" záhlaví 
    - "<bodz>" tělo stránky
        - párové tagy - vždy -> <html> </html>

    - tag může obsahovat parametry
    "<tag P="parametr" P2="druhý">"
    - obsahovat text
    "<h1>Nadpis stránky</h1>"

    - na virtuálu, stránky na /var/www/html/...
    
    - PHP v html  
    "<?php phpinfo(); ?>"

    - UDĚLAT PROJEKT PHP - CO CHCEME TAKŽE NEJVÍC TRYHARD DATABÁZE FILMŮ 
    - KRÁST OBRÁZKY Z WEBU :)

########
SÍTĚ
########
https://moodle.gybon.cz/mod/page/view.php?id=13940
- sada protokolů

TCP/IP
    - vrstvy (nižší slouží vyšším)
        v: Linková a Fyzická | Síťová (IP) | Transportní - TCP/UDP | Aplikační

        - někde na routeru DHCP
            udává MAC, ip adresy

        - Fyzická + linková (na lin. vrstvě se na identifikaci používají MAC
          adresy)
            - ETHERNET - posílání dat na základě mac adres (zároveň ale vidí
              vyšší vrstvy)
            - *l. vrstva* - propojení dvou bodů v lokálním mediu

        - Síťová (IP)
            - IPv4: 4 bity - 1.-3. adresa v síti, 4. adresa bodu;
            (+ síťová maska): 4 bity (255.255.255.0) 
            255 - 11111111; 0 - 00000000 (maska a ip adresa AND operace -> vypadne ip sítě)
            
            - max uzlů je 254 (1.-254.) adres. 2**8 = 256 (256 - 2)
            - x.x.x.0 je adresa sítě | x.x.x.255 adresa broadcastu (když něco
              chceme poslat všem :))
            
            - ++NAT technologie = router schovává pod sebou (jednou ipv4
              adresou svojí lokální síť s vlastníma adresama)
            
            - IPv6: v podstatě kolik bitů chceme 
            - síťový prefix "10.12.0.0/24" - "24 bitů bude adresa sítě"
            
            - s. vrstva - propojení dvou bodů kdekoliv na síti
            - jak se dostat k adrese někoho cizího?? Jak poslat někomu zásilku
            -> balíček od nás se "odveze" z našeho pc na router přes MAC adresu, 
               routery podle síťových masek předávají informaci mezi sebou až do cílového bodu.
               
               KAŽDÁ VĚC MÁ V SOBĚ IP ADRESU (BRÁNU) ROUTERU
               3 důležité věci pro TCP/IP (MAC,IP adresa,BRÁNA)

            - ++ARP/RARP - protokol překlad - Ip -> MAC
        
        - TCP
            - vytváří "virtuální duplexní tunel" mezi dvěma spojenými IP
              adresami
            - na TCP vrstvě už dochází k domlouvání, spojení, kontrole,
              zabezpečení proti ztrátě dat
            - "handshaky" - domlouvání správného spojení 

            - "z pohledu TCP je mezi spojenými IP adresami kdekoliv na světě
              tunel, neřeší kudy to jde, ale jestli přichází správně atd"

        - Aplikační vrstva
            - domény - hierarchie - nejvyšší - root domain (".")

            - domény a subdomény
                - př. "host.doména.TLD" (tld - top level domain (edu, gov, cz, net, org))
                       www .senzam.cz

            - DNS server = převod jmenného pojmenování "seznam.cz" na ip adresy
            - "FQDN" fully qualified domain name = úplné pojmenování pc 
                - to co používáme u pojmenování pc sítí 
            
            - FQDN -> ip klasickej
              FQDN <- ip reverzní překlad

            - jestli chceme domény - nic.cz == "cz.nic"
                - správce domény cz
                ( nic.org = správce domény org )


            - na světě 13 kořenových dns serverů -> zná, kde jsou tld (př. cz),
            - tam se náš dotaz ptá na server, který hledáme
            - DNS hledá nejkratší cestu přes síť na hledanou doménu
    
            - mail servery
            - telnet!
